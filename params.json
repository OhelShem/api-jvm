{"name":"Ohel Shem API for JVM","tagline":"A smart API for smart school","body":"[![Kotlin](https://img.shields.io/badge/kotlin-1.0.0-blue.svg)](http://kotlinlang.org) [![License Apache](https://img.shields.io/badge/License-Apache%202.0-red.svg)](http://www.apache.org/licenses/LICENSE-2.0)\r\n\r\nOhel Shem API for JVM\r\n=====================\r\nOhel Shem (Hebrew: אהל שם‎) is an Israeli high school located in the city of Ramat Gan. \r\nThe school has about 1,550 students studying in 45 classes, from ninth to twelfth grade, and about 160 teachers and 40 workers.\r\n\r\n![Ohel Shem Logo](http://i.imgur.com/Yy1Z5aX.png)\r\n\r\n## Ohel Shem :heart: OSS\r\nThis project is part of 'Ohel Shem OSS', our attempt at providing open standard for modern school.\r\n\r\n## Maven dependency\r\n**Step 1. Add this repository to your build file**\r\n```groovy\r\nrepositories {\r\n\t    maven {\r\n            url \"http://dl.bintray.com/ohelshem/maven\" \r\n        }\r\n\t}\r\n```\r\n**Step 2. Add the dependency in the form**\r\n```groovy\r\ndependencies {\r\n\t    compile 'com.ohelshem:api:0.1'\r\n\t}\r\n```\r\n\r\n\r\n## Api\r\n\r\n### Prerequisites\r\nIn order to use the API, you should implement few interfaces that the API is based on:\r\n\r\n### `ApiDatabase`\r\nThe API uses this class in order to store all the data.\r\n\r\n* `serverUpdateDate: long` - The date value in the server on last update.\r\n* `changesDate: long` - The date that the saved changes are valid for.\r\n* `updateDate: long` - The date value in the client on last update.\r\n\r\n___\r\n\r\n* `userData: UserData` - User's private info provided by the API.\r\n* `timetable: Hour[][]` - The user's timetable.\r\n\r\n___\r\n\r\n* `changes: List<Change>` - The changes for the User's layer for the day.\r\n* `tests: List<Test>` - User's tests for the year.\r\n* `messages: List<Message>` - The messages the user has received.\r\n\r\n**Note:** All dates are in Epoch time.\r\n\r\n### `ColorProvider`\r\nA change by itself doesn't have a color. Instead, a filter is being applied on the change\r\nto set its color.\r\n\r\nThe API provide a default color provider, with receives a default Color and a mapping between \r\nname and a color. It will use `Contains` with the String.\r\n\r\n```java\r\nApiFactory.defaultColorProvider(defaultColor: Int, filters: List<Pair<Int, String>> | Map<String, Int>)\r\n\r\n```\r\n\r\n## Create the controller\r\nFirst, create the controller:\r\n\r\n```java\r\nApiController apiController = ApiFactory.create(apiDatabase, colorProvider)\r\napiController.setNetworkAvailabilityProvider(new Function0<Boolean>() {\r\n            @Override\r\n            public Boolean invoke() {\r\n                return true; // Check if network is available, true for available\r\n            }\r\n});\r\n```\r\n\r\nSecond, attach a callback:\r\n\r\n```java\r\napiController.setCallback(id, new ApiController.Callback() {\r\n            @Override\r\n            public void onSuccess(@NotNull List<? extends ApiController.Api> apis) {\r\n                // the list contains all the apis that were updated.\r\n                // enum Api { Changes, Messages, Tests, Timetable, UserData }\r\n            }\r\n\r\n            @Override\r\n            public void onFail(@NotNull UpdateError error) {\r\n\r\n            }\r\n        });\r\n```\r\n\r\n`Id` is an int, id for the callback.\r\n\r\n**Note:** in order to read the data, work with `ApiDatabase`. `ApiController` store its data there automatically.\r\n\r\nThird, set the user data:\r\n\r\n```java\r\napiController.setAuthData(new AuthData(userId, userPassword));\r\n```\r\n\r\nNow, Just call `apiController.update()`.\r\n\r\n**Note:** If you want to update for login, it is better to use `apiController.login()` which also clear the server update time.\r\n\r\n## Android support\r\nIn order to use this with Android, you need to add a gradle dependency for `fuel-android` module.\r\n\r\n```groovy\r\nrepositories {\r\n    jcenter()\r\n}\r\n\r\ndependencies {\r\n    compile 'com.github.kittinunf.fuel:fuel-android:1.0.0'\r\n}\r\n```\r\n\r\nThis library is based on a library called [Fuel](https://github.com/kittinunf/Fuel) which need a plugin to work on Android as intended.\r\n\r\n## Kotlin support\r\nThis library was written fully in [Kotlin](https://kotlinlang.org/). Kotlin is Statically typed programming language\r\nfor the JVM, Android and the browser with 100% interoperable with Java™.\r\n\r\n```kotlin\r\nval apiController = ApiFactory.create(apiDatabase, colorProvider)\r\n\r\napiController.setNetworkAvailabilityProvider { true }\r\napiController[callbackId] = object : Callback { /* Implement it */ }\r\napiController.authData = AuthData(userId, userPassword)\r\n\r\napiController.update()\r\n```\r\n\r\n# License\r\n\r\n```\r\nCopyright 2016 Yoav Sternberg\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}